# Elixir is a functional programming language, not an OOP language
# Elixir is better, modern Erlang. Fast and easy to write

# To update dependencies
mix deps.get

# generate an elixir project with
mix new file_name

# mix.lock is the file where the depencies versions are listed

# To open the Elixir shell, go into the project and type
iex -S mix

# To close the Elixir shell type
Ctrl + c, a

# To compile the changes made in the Elixir shell
iex> recompile
or
iex> recompile force: true
open

# arity = number of arguments
# functions can have the same name as long as there are different number of arguements (function overloading)

# Elixir features Piping
# The pipe operator |> passes the result of an expression as the first parameter of another expression.

# using if statements in Elixir is bad practice. Use switch statements instead

# In Elixir there exists a data type called atoms are constants whose values are their own name
iex> :apple
:apple
iex> :orange
:orange
iex> :watermelon
:watermelon

# Elixir features Pattern Matching which is a technique where you test an expression to determine if it has certain characteristics. Used to assign variables.

# there is no getting from a list with index like with JS or with Python

# To grab the first element with pattern matching
iex> [first_element | _tail] = [1, 2, 3]
[1, 2, 3]
iex> first_element
1

# To grab the first two elements with pattern matching
iex> [a, b | _tail] = [1, 2, 3, 4, 5, 6, 7]
[1, 2, 3, 4, 5, 6, 7]
iex> a
1
iex> b
2
iex> _tail
[3, 4, 5, 6, 7]

# Two types of data structs in Elixir are Maps and Keyword Lists
# maps are collection of key value pairs (hashes in Ruby and objects in JS)
# Creating a map and using dot notation
iex> colors = %{primary: "red"}
%{primary: "red"}
iex> colors.primary
"red"

# maps can have multiple key value pairs
iex> colors = %{primary: "red", secondary: "blue"}
%{primary: "red", secondary: "blue"}

# maps can pattern match in an interesting way as well instead of dot notation
iex> colors = %{primary: "red", secondary: "blue"}
%{primary: "red", secondary: "blue"}
iex> %{secondary: secondary_color} = colors
%{primary: "red", secondary: "blue"}
iex> secondary_color
"blue"

# updating values in maps are difficult because data structs are immutable. We have to create a new data struct using the old one with the changes

# using a Map function. Note that colors is still the original colors, the Map function creates a new Map data struct
iex> colors = %{primary: "red", secondary: "blue"}
%{primary: "red", secondary: "blue"} 
iex> Map.put(colors, :primary, "green")
%{primary: "green", secondary: "blue"}

# not using a Map function. Again it does not update colors but creates a new data struct with the changes to colors
iex> colors = %{primary: "red", secondary: "blue"}
%{primary: "red", secondary: "blue"} 
iex> %{colors | primary: "green"}
%{primary: "green", secondary: "blue"}
iex> colors
%{primary: "red", secondary: "blue"}

# we cannot add an element to a Map without Map functions. This will not work:
iex> colors = %{primary: "red", secondary: "blue"}
%{primary: "red", secondary: "blue"} 
iex> %{colors | tertiary: "green"}
error message

# to add an element we need a map function:
iex> colors = %{primary: "red", secondary: "blue"}
%{primary: "red", secondary: "blue"} 
iex> Map.put(colors, :tertiary, "green")
%{primary: "red", secondary: "blue", tertiary: "green"}

# lists are like arrays and used for any arbitrary length
# tuples are like arrays but every index is special

# the other data struct is Keyword Lists which combines lists and tuples
iex> colors = [{:primary, "red"}, {:secondary, "green"}]
[primary: "red", secondary: "green"]

# note when we run a Keyword List we get back key value pairs similar to a map
# to access this list we can use the atom as the index
iex> colors[:primary]
"red"

# it looks like a keyvalue pair but elixir thinks of it as a tuple, it goes through the list and finds the value from the key
# Keyword Lists also allows for the following syntax which closely resembles a list
iex> colors = [primary: "red", secondary: "green"]
[primary: "red", secondary: "green"]

# So when should one use Keyword Lists or Maps?
# with maps there is only one property per map, in the example below assigning two elements to the same variable. The second assignment overwrites the first
iex> colors = %{primary: "red", primary: "blue"}
primary: "blue"

# with Keyword List, you can make the as many assignments as one wants and it will not get rid of either assignments
iex> colors = [primary: "red", primary: "blue"]
[primary: "red", primary: "blue"]

# an example of why this is useful it because of databases, you can form a database query using keyword lists
# below is an example of it being used in a database that stores users
iex> query = User.find_where([where: user.age > 10, where user.subscribed == true])

# if you passing a keyword list to a function and keyword list is the last argument you can remove the square braces
# it looks like we are providing two different arguements but elixir can read it as a single argument
iex> query = User.find_where(where: user.age > 10, where user.subscribed == true)

# you can remove the parens as well
iex> query = User.find_where where: user.age > 10, where user.subscribed == true

# hashing an input, converting a string to a unique sequence for chars
# md5 is the algorithm to has an input and it producess a 128-bit hash value
# an example of hashing in the mix shell is the following:
iex> hash = :crypto.hash(:md5, "banana")
<<114, 179, 2, 191, 41, 122, 34, 138, 117, 115, 1, 35, 239, 239, 124, 65>>
iex> Base.encode16(hash)
"72B302BF297A228A75730123EFEF7C41"
iex> :binary.bin_to_list(hash)
[114, 179, 2, 191, 41, 122, 34, 138, 117, 115, 1, 35, 239, 239, 124, 65]

# Elixir uses structs, a datastructure used for modeling data (duh)
# its a map that can be assigned default values and have addition compile time checking for properties
# to work with structs in elixir we would need to make a new module. In the project's lib folder, we need to make a new module and in the new module we use the keyword defstruct which values set to null
defmodule Module_Name.Struct_Name do
    defstruct variableA: nil, variableB: nil
end

# to create a struct in the shell
iex> %Module_Name.Struct_Name{}
%Module_Name.Struct_Name{variableA: nil, variableB: nil}

# can create with a starting property
iex> %Module_Name.Struct_Name{variableA: []}
%Module_Name.Struct_Name{variableA: [], variableB: nil}

# note we cannot add on property that are not defined in the struct
iex> %Module_Name.Struct_Name{variableC: []}
error

# we can pattern matching structs too
iex> %Module_Name.Struct_Name{variableA: [a, b, c | _tail]} = %Module_Name.Struct_Name{variableA: [145, 46, 200, 3, 178, 206, 73, 228, 165, 65, 6, 141, 73, 90, 181, 112]}
%Identicon.Image{variableA: [145, 46, 200, 3, 178, 206, 73, 228, 165, 65, 6, 141, 73, 90, 181, 112], variableB: nil}
iex> a
145
iex> b
46
iex> c
200

# Elixir features automatic documentation generation with @moduledoc and @doc expressions in the elixir file
# the hashtag or pound symbol is used for inline documentation

# test cases are stored in the test folder and can be ran with
mix test

# assert keyword used to confirm whether the value is true
# refute keyword used to confirm whether the value is false (using assert != is bad)

# doctests are extra swag, they are tests within the module. You can find them in the doc comments under examples. The sample code will run in the test run. This will only work if written in a specific way, double hashtag, the word Examples and then double/triple indent before the command

# doctest will be enabled with a line within module_name_test.exs
doctest module_name

# Elixir can help create docs in html form with
mix docs

# the html files will be located in doc directory
open doc/index.html

# Phoenix is the web framework that elixir uses to build applications
# make sure that nodejs is installed (version > 5), Pheonix needs the toolings to interact with JS clients
# Phoenix' job is to be a web server, users can recieve back html, json, or web sockets
# Phoenix can hold static data (videos, images, etc.)
# We can use almost all types of database with Phoenix, database will hold all data related to the application (list of users, list of blogposts, etc.)
# Everything inside of Phoenix is to recieve requests from clients and pulls the data from the database and responds as html, json or a web socket

# How does Phoenix handle these requests?
# 1. Incoming Request
# 2. Validate Request (Is it an HTML request?)
# 3. See if it has a session
# 4. Do a security check (Is this user authenticated)
# 5. Add required data to payload (Put on HTTP headers for a browser)
# 6. See what the request was trying to access
# 7. Formulate and return a request

# To generate a new phoenix project
mix phoenix.new project_name

# once the project is generated a folder for the project will be made
cd project_name

# make sure to get the dependancies for the project
mix deps.get

# to run the pheonix server run
mix phoenix.server

#
mix ecto.create

# We will be using PostgreSQL as the database. Setting up Postgre on Mac is a pain
# ChatGPT helped a lot with the PostgreSQL installation on MacOS